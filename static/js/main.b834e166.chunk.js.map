{"version":3,"sources":["pages/recipes/index.js","components/header/index.js","app.js","serviceWorker.js","index.js"],"names":["Recipe","title","ingredients","instructions","useState","isOpen","setIsOpen","className","onClick","Fragment","map","item","index","key","Recipes","recipes","id","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g+LAkBA,SAASA,EAAT,GAAuD,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAAgB,EACxBC,oBAAS,GADe,mBAC7CC,EAD6C,KACrCC,EADqC,KAWpD,OACE,yBAAKC,UAAU,UACb,yBAAKC,QAVW,WAEhBF,GADa,IAAXD,IASyBE,UAAU,gBAClCN,GAEFI,GACC,kBAAC,IAAMI,SAAP,KACE,yBAAKF,UAAU,4BAAf,eACA,yBAAKA,UAAU,sBACb,4BACGL,EAAYQ,KAAI,SAACC,EAAMC,GACtB,OACE,wBAAIL,UAAU,0BAA0BM,IAAKD,GAAQD,QAM7D,yBAAKJ,UAAU,6BAAf,gBACA,yBAAKA,UAAU,uBACb,4BACGJ,EAAaO,KAAI,SAACC,EAAMC,GACvB,OACE,wBAAIL,UAAU,2BAA2BM,IAAKD,GAAQD,UAWzDG,MA5Df,YAA+B,IAAZC,EAAW,EAAXA,QAClB,OACG,kBAAC,IAAMN,SAAP,KACCM,EAAQL,KAAI,SAAAC,GACX,OAAO,kBAACX,EAAD,CACLa,IAAKF,EAAKK,GACVf,MAAOU,EAAKV,MACZC,YAAaS,EAAKT,YAClBC,aAAcQ,EAAKR,oB,OCHZc,MANf,YAA4B,IAAVhB,EAAS,EAATA,MAChB,OACE,yBAAKM,UAAU,gBAAf,IAAgCN,EAAhC,MCUWiB,MATf,WACE,OACE,kBAAC,IAAMT,SAAP,KACE,kBAAC,EAAD,CAAQR,MAAM,eACd,kBAAC,EAAD,CAASc,QAASA,MCGJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b834e166.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\n\nfunction Recipes({ recipes }) {\n\treturn (\n    <React.Fragment>\n    {recipes.map(item => {\n      return <Recipe\n        key={item.id}\n        title={item.title}\n        ingredients={item.ingredients}\n        instructions={item.instructions}\n      />\n    })}\n    </React.Fragment>\n\t);\n}\n\nfunction Recipe({ title, ingredients, instructions }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = () => {\n    if (isOpen === false) {\n      setIsOpen(true);\n    } else {\n      setIsOpen(false);\n    }\n  }\n\n  return (\n    <div className=\"recipe\">\n      <div onClick={handleClick} className=\"recipe-title\">\n        {title}\n      </div>\n      {isOpen && (\n        <React.Fragment>\n          <div className=\"recipe-ingredients-title\">Ingredients</div>\n          <div className=\"recipe-ingredients\">\n            <ul>\n              {ingredients.map((item, index) => {\n                return (\n                  <li className=\"recipe-ingredients-item\" key={index}>{item}</li>\n                );\n              })}\n            </ul>\n          </div>\n\n          <div className=\"recipe-instructions-title\">Instructions</div>\n          <div className=\"recipe-instructions\">\n            <ol>\n              {instructions.map((item, index) => {\n                return (\n                  <li className=\"recipe-instructions-item\" key={index}>{item}</li>\n                );\n              })}\n          </ol>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n}\n\nexport default Recipes;","import React from 'react';\n\nfunction Header({ title }) {\n  return (\n    <div className=\"header-title\"> {title} </div>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport Recipes from './pages/recipes';\nimport recipes from './data/recipes.json';\nimport Header from './components/header'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header title='My Recipes' />\n      <Recipes recipes={recipes} />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}